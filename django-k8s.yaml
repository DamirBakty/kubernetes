apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-deployment-ingress
  labels:
    app: my-k8s-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      project: my-ingress
  template:
    metadata:
      labels:
        project: my-ingress
    spec:
      containers:
        - name: my-ingress-web
          image: localhost:5000/django_app:latest
          ports:
            - containerPort: 80
          envFrom:
            - secretRef:
                name: django-env
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-web-deployment-ingress
spec:
  ingressClassName: nginx
  rules:
    - host: star-burger.test
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-web-ingress
                port:
                  number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: my-web-ingress
spec:
  selector:
    project: my-ingress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: clearsessions-cronjob
spec:
  schedule: "* * * * *"
  startingDeadlineSeconds: 60
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          containers:
            - name: my-clear-sessions-cron
              image: localhost:5000/django_app:latest
              command: [ "/bin/bash", "-c", "python manage.py clearsessions" ]
              envFrom:
                - secretRef:
                    name: django-env
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: Job
metadata:
  name: my-migrate-job
spec:
  template:
    spec:
      containers:
        - name: my-migrate
          image: localhost:5000/django_app:latest
          command: [ "python", "manage.py", "migrate", "--noinput" ]
          envFrom:
            - secretRef:
                name: django-env
      restartPolicy: OnFailure
  backoffLimit: 4
